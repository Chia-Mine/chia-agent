import { bytes32 } from "../types/blockchain_format/sized_bytes";
import { ClassgroupElement } from "../types/blockchain_format/classgroup";
import { Coin } from "../types/blockchain_format/coin";
import { SubEpochSummary } from "../types/blockchain_format/sub_epoch_summary";
import { bool, Optional, uint128, uint32, uint64, uint8 } from "../types/_python_types_";
export declare type BlockRecord = {
    header_hash: bytes32;
    prev_hash: bytes32;
    height: uint32;
    weight: uint128;
    total_iters: uint128;
    signage_point_index: uint8;
    challenge_vdf_output: ClassgroupElement;
    infused_challenge_vdf_output: Optional<ClassgroupElement>;
    reward_infusion_new_challenge: bytes32;
    challenge_block_info_hash: bytes32;
    sub_slot_iters: uint64;
    pool_puzzle_hash: bytes32;
    farmer_puzzle_hash: bytes32;
    required_iters: uint64;
    deficit: uint8;
    overflow: bool;
    prev_transaction_block_height: uint32;
    timestamp: Optional<uint64>;
    prev_transaction_block_hash: Optional<bytes32>;
    fees: Optional<uint64>;
    reward_claims_incorporated: Optional<Coin[]>;
    finished_challenge_slot_hashes: Optional<bytes32[]>;
    finished_infused_challenge_slot_hashes: Optional<bytes32[]>;
    finished_reward_slot_hashes: Optional<bytes32[]>;
    sub_epoch_summary_included: Optional<SubEpochSummary>;
};
